#!/bin/sh
printf '\033[8;60;165t'
clear

LocalScriptVer="v1.0.4"
RemoteScriptVer=""
RemoteScriptPath="https://raw.githubusercontent.com/crazybirdy/MBR-Manual-Method/master/Q7-Update-installScript"
LocateScriptPath="$HOME/MBR-Manual-Method/Q7-Update-installScript"
ScriptName="installScript_1014update"

FileNameArray=(
  dm
  )

autodownload() {
if [[ ! -d "${LocateScriptPath}" ]]; then
  mkdir -p "${LocateScriptPath}"
fi
let index=0
for filename in "${FileNameArray[@]}"; do
  if [[ ! -f "${LocateScriptPath}/${filename}" ]]; then
    echo
    echo "Downloading: ${filename} ..."
    curl "${RemoteScriptPath}/${filename}" -o "${LocateScriptPath}/${filename}"
    if [[ "${filename}" == "dm" ]]; then
      chmod +x "${LocateScriptPath}/${filename}"
    fi
  fi
  let index++
done
if [[ ! -f "${LocateScriptPath}/${ScriptName}" ]]; then
  cat "$0" > "${LocateScriptPath}/${ScriptName}"
  chmod +x "${LocateScriptPath}/${ScriptName}"
  exec "${LocateScriptPath}/${ScriptName}"
fi
}
selfUpdate() {
  echo
  cat "/private/tmp/${ScriptName}" > "${LocateScriptPath}/${ScriptName}"
  chmod +x "${LocateScriptPath}/${ScriptName}"
  open "${LocateScriptPath}"
  exec "${LocateScriptPath}/${ScriptName}"
}
IsNumericOnly() {
  [[ "${1}" =~ ^-?[0-9]+$ ]] && return 0 || return 1
}
updatescript() {
  autodownload
  rm -f "/private/tmp/${ScriptName}"
  curl "${RemoteScriptPath}/${ScriptName}" -o "/private/tmp/${ScriptName}" 2>/dev/null

  RemoteScriptVer=$( cat /private/tmp/${ScriptName} | grep 'LocalScriptVer="v' | grep -v grep | tr -cd '.0-9' )
  LVALUE=$( echo $LocalScriptVer | tr -cd [:digit:] )
  RVALUE=$( echo $RemoteScriptVer | tr -cd [:digit:] )

  echo
  if IsNumericOnly $RVALUE; then
    [[ $LVALUE -eq $RVALUE ]] && printf "\e[1;34mLocal: ${LocalScriptVer}  ..  Remote: v${RemoteScriptVer}\e[1;32m%*s\e[0m" $((40-${#LocalScriptVer})) "No update available."
    [[ $LVALUE -gt $RVALUE ]] && printf "\e[1;34mLocal: ${LocalScriptVer}  ..  Remote: v${RemoteScriptVer}\e[1;31m%*s\e[0m" $((40-${#LocalScriptVer})) "Wow, are you coming from the future?"
    [[ $LVALUE -lt $RVALUE ]] && printf "\e[1;34mLocal: ${LocalScriptVer}  ..  Remote: v${RemoteScriptVer}\e[1;5;34m%*s\e[0m" $((40-${#LocalScriptVer})) "Update available (v$RemoteScriptVer)" && selfUpdate 
  else
    printf "${LocalScriptVer}\e[1;31m\n%s\e[0m" "Remote version unavailable due to unknown reasons!"
  fi
  clear
}

#
# This script is refer to Pike R. Alpha's work as follow, also thanks to Pike R. Alpha.       by crazybirdy. v6.20190528
#

########################################################################################################################
# https://github.com/Piker-Alpha/HandyScripts/blob/master/installScriptTemplate.sh                                     #
# Bash script to download macOS High Sierra installation packages from sucatalog.gz and build the installer.pkg for it.#
# version 2.1 - Copyright (c) 2017 by Pike R. Alpha (PikeRAlpha@yahoo.com)                                             #
########################################################################################################################

printred() {
  printf "\e[1;31m${1}\e[0m"
}
printgreen() {
  printf "\e[1;32m${1}\e[0m"
}
printyellow() {
  printf "\e[1;33m${1}\e[0m"
}
printblue() {
  printf "\e[1;34m${1}\e[0m"
}
printpurple() {
  printf "\e[1;35m${1}\e[0m"
}
printLatest() {
  printf "\e[1;31m${1}\e[0m"
}
function headline()
{
  echo 
  printf "更新 macOS Mojave 10.14.x, 適用 \e[1;34mGPT 及 MBR\e[0m, \e[1;31mMBR 將不會更新 Recovery HD 分區.\e[0m \n"
  printf "Update macOS Mojave 10.14.x, works fine with \e[1;34mboth GPT and MBR\e[0m, and \e[1;31mMBR will not update Recovery HD partition.\e[0m \n"
  echo 
  #
  # http://www.insanelymac.com/forum/topic/330364-macos-high-sierra-10132-update-released/?p=2546218
  # Fix Safari and App Store stopped connecting to the internet.
  # 
  printf "After updating finished and reboot, \e[1;34mSafari and App Store will stop connecting to the internet.\e[0m\n"
  printf "To fix this, need to run the following code in Terminal, and reboot after finished:\n"
  printf "\e[1;31msudo update_dyld_shared_cache -force\e[0m\n"
  echo
}
function checkdm()
{
  scriptdirpath=${LocateScriptPath}

  if [[ -f "$scriptdirpath/dm" ]]; then
    echo "已找到 Found $scriptdirpath/dm"
    datafile=yes
  fi
  echo 
  if [[ ! -f "$scriptdirpath/dm" ]]; then
    echo "未找到 Not found $scriptdirpath/dm"
    datafile=no
  fi
  if [[ $datafile = no ]]; then
    echo
    echo
    echo "發生錯誤！！！"
    echo "發生錯誤！！！"
    echo "發生錯誤！！！"
    echo
    echo "請將 未找到 的文件 放入 installScript_1014 腳本的文件夾中"
    echo "$scriptpath"
    echo
    echo
    echo "Error!"
    echo "Error!"
    echo "Error!"
    echo
    echo "Please put the Not found files into the folder of script installScript_1014."
    echo "$scriptpath"
    echo
    echo
    exit
  fi
}
function catalogselect()
{
  # CatalogURL for Regular Software Updates
  CatalogURLRegular="https://swscan.apple.com/content/catalogs/others/index-10.14-10.13-10.12-10.11-10.10-10.9-mountainlion-lion-snowleopard-leopard.merged-1.sucatalog.gz"
  # CatalogURL for Public Beta Program Members
  CatalogURLPublic="https://swscan.apple.com/content/catalogs/others/index-10.14beta-10.14-10.13-10.12-10.11-10.10-10.9-mountainlion-lion-snowleopard-leopard.merged-1.sucatalog.gz"
  # CatalogURL for Developer Beta Program Members
  CatalogURLDeveloper="https://swscan.apple.com/content/catalogs/others/index-10.14seed-10.14-10.13-10.12-10.11-10.10-10.9-mountainlion-lion-snowleopard-leopard.merged-1.sucatalog.gz"

  echo
  printred "1.選用 正式版 下載渠道。\n"
  printred "1.Use CatalogURL for Regular Software Updates\n"
  echo "  ${CatalogURLRegular}"
  echo
  printred "2.選用 公開測試版 下載渠道。\n"
  printred "2.Use CatalogURL for Public Beta Program Members\n"
  echo "  ${CatalogURLPublic}"
  echo
  printred "3.選用 開發者測試版 下載渠道。\n"
  printred "3.Use CatalogURL for Developer Beta Program Members\n"
  echo "  ${CatalogURLDeveloper}"
  echo
  read -p "請選擇 要下載的 版本  Select the CatalogURL ( 1 / 2 / 3 ) : " macOSver

  case $macOSver in
    1)
      # CatalogURL for Regular Software Updates
      CatalogURL="${CatalogURLRegular}"
      CatalogURLver="正式版 下載渠道 Regular Software Updates"
    ;;
    2)
      # CatalogURL for Developer Beta Program Members
      CatalogURL="${CatalogURLPublic}"
      CatalogURLver="公開測試版 下載渠道 Public Beta Updates"
    ;;
    3)
      # CatalogURL for Developer Beta Program Members
      CatalogURL="${CatalogURLDeveloper}"
      CatalogURLver="開發者測試版 下載渠道 Developer Beta Updates"
    ;;
    *)
      # CatalogURL for Regular Software Updates
      CatalogURL="${CatalogURLRegular}"
      CatalogURLver="正式版 下載渠道 Regular Software Updates"
    ;;
  esac

  echo
  printf "選用版本  The selected CatalogURL:  \e[1;32m$CatalogURLver\e[0m\n"
  echo "  ${CatalogURL}"
  echo
  echo
  echo "正在搜尋更新，請耐心等候！ Searching for updates from catalogs of swscan.apple.com. Be patient!"
  echo 

  cd /private/tmp
  rm -f update-catalogs
  rm -f update-catalogs.gz
  curl ${CatalogURL} -o update-catalogs.gz 2>/dev/null

  found404=`cat update-catalogs.gz | grep Not | grep Found `
  if [[ ! $found404 == "" ]]; then
    printf "  未找到  Not found the CatalogURL: \e[1;32m$CatalogURLver\e[0m\n"
    echo
    exit
  fi

  gunzip update-catalogs.gz
  catalogfile="/private/tmp/update-catalogs"
}
function macosupdatearray()
{
  AmacOSUpdArray=`cat ${catalogfile} | grep macOSUpd10.14 | grep pkg | grep -v RecoveryHDUpdate | grep -v Patch | grep -v integrityData | grep -v ForSeed | sed 's/<string>//g' | sed 's/<\/string>//g' | awk '{print $1;}' `

  let index=0
  for element in "${AmacOSUpdArray[@]}"; do
    AmacOSUpd[$index]="${element}"
    let index++
  done

  macOSUpd=($(echo "${AmacOSUpd[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' '))
}
function macosupdatecomboarray()
{
  AmacOSUpdComboArray=`cat ${catalogfile} | grep macOSUpdCombo10.14 | grep pkg | grep -v RecoveryHDUpdate | grep -v Patch | grep -v integrityData | grep -v ForSeed | sed 's/<string>//g' | sed 's/<\/string>//g' | awk '{print $1;}' `

  let index=0
  for element in "${AmacOSUpdComboArray[@]}"; do
    AmacOSUpdCombo[$index]="${element}"
    let index++
  done

  macOSUpdCombo=($(echo "${AmacOSUpdCombo[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' '))
}
function macosupdatesecurityarray()
{
  ASecUpdArray=`cat ${catalogfile} | grep SecUpd | grep pkg | grep Mojave | grep -v RecoveryHDUpdate | grep -v integrityData | sed 's/<string>//g' | sed 's/<\/string>//g' | awk '{print $1;}' `

  let index=0
  for element in "${ASecUpdArray[@]}"; do
    ASecUpd[$index]="${element}"
    let index++
  done

  SecUpd=($(echo "${ASecUpd[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' '))
}
function updatelist()
{
  index=0
  for macOSUpdlist in "${macOSUpd[@]}"
  do
    if [[ ! $macOSUpdlist == "" ]]; then

      macOSUpdver[$index]=`echo $macOSUpdlist | sed 's/\// /g' | awk '{print $9;}' | sed 's/macOSUpd//g' | sed 's/.pkg//g' | sed 's/iMacProSupplemental//g' | sed 's/Supplemental//g' `

      macOSUpdversion1[$index]=`echo $macOSUpdlist | sed 's/\// /g' | awk '{print $5;}' `
      macOSUpdversion2[$index]=`echo $macOSUpdlist | sed 's/\// /g' | awk '{print $6;}' `
      macOSUpdversion[$index]="${macOSUpdversion1[$index]}/${macOSUpdversion2[$index]}"
      macOSUpdkey[$index]=`echo $macOSUpdlist | sed 's/\// /g' | awk '{print $7;}' `
      macOSUpdkeydistribution[$index]=`echo ${macOSUpdkey[$index]} | sed 's/.\{9\}/& /g' | awk '{print $1;}' `
      macOSUpdsalt[$index]=`echo $macOSUpdlist | sed 's/\// /g' | awk '{print $8;}' `

      urls="https://swdist.apple.com/content/downloads/${macOSUpdversion[$index]}/${macOSUpdkey[$index]}/${macOSUpdsalt[$index]}/"
      macOSurlpath=${macOSUpdlist%%'macOSUpd'*}
      url="${macOSurlpath}"
      distribution="${macOSUpdkeydistribution[$index]}.English.dist"
      rm -f *dist
      curl $url$distribution -o ${macOSUpdkeydistribution[$index]}.English.dist 2>/dev/null
      macOSupdateProductVersion[$index]=`cat ${macOSUpdkeydistribution[$index]}.English.dist | grep -A 1 macOSProductVersion | awk NR==2 | sed 's/<string>//g' | sed 's/<\/string>//g' | awk '{print $1;}' `
      macOSupdateProductBuildVersion[$index]=`cat ${macOSUpdkeydistribution[$index]}.English.dist | grep -A 1 macOSProductBuildVersion | awk NR==2 | sed 's/<string>//g' | sed 's/<\/string>//g' | awk '{print $1;}' `
      if [[ ${macOSupdateProductVersion[$index]} == "10.14" ]]; then 
        macOSupdateProductVersion[$index]="10.14.0"
      fi
      macOSupdatebuildver[$index]=${macOSupdateProductVersion[$index]}.${macOSupdateProductBuildVersion[$index]}
      macOSupdatebeta[$index]=`cat ${macOSUpdkeydistribution[$index]}.English.dist | grep SU_TITLE | grep strings | grep Beta `
      if [[ ! ${macOSupdatebeta[$index]} == "" ]]; then 
        macOSupdatebeta[$index]="Beta"
      fi
      rm -f *dist

      macOSuptime[$index]=`cat ${catalogfile} | grep -A 5 PostDate | grep -B 7 $urls${macOSUpdkeydistribution[$index]} | grep \<date\> | sed 's/<date>//g' | sed 's/<\/date>//g' | awk '{print $1;}' | sed 's/T/ /g' | sed 's/Z//g' | awk NR==1 `
      macOSupdate[$index]="${macOSuptime[$index]} .. ${macOSUpdkeydistribution[$index]} .. ${macOSupdatebuildver[$index]} Update ${macOSupdatebeta[$index]}"

      macOSlist[$index]=`echo ${macOSUpdlist} `

      let index++
    fi
  done
  for macOSUpdCombolist in "${macOSUpdCombo[@]}"
  do
    if [[ ! $macOSUpdCombolist == "" ]]; then

      macOSUpdver[$index]=`echo $macOSUpdCombolist | sed 's/\// /g' | awk '{print $9;}' | sed 's/macOSUpdCombo//g' | sed 's/Auto.pkg//g' | sed 's/ForSeed.pkg//g' | sed 's/.pkg//g'  `

      macOSUpdversion1[$index]=`echo $macOSUpdCombolist | sed 's/\// /g' | awk '{print $5;}' `
      macOSUpdversion2[$index]=`echo $macOSUpdCombolist | sed 's/\// /g' | awk '{print $6;}' `
      macOSUpdversion[$index]="${macOSUpdversion1[$index]}/${macOSUpdversion2[$index]}"
      macOSUpdkey[$index]=`echo $macOSUpdCombolist | sed 's/\// /g' | awk '{print $7;}' `
      macOSUpdkeydistribution[$index]=`echo ${macOSUpdkey[$index]} | sed 's/.\{9\}/& /g' | awk '{print $1;}' `
      macOSUpdsalt[$index]=`echo $macOSUpdCombolist | sed 's/\// /g' | awk '{print $8;}' `

      urls="https://swdist.apple.com/content/downloads/${macOSUpdversion[$index]}/${macOSUpdkey[$index]}/${macOSUpdsalt[$index]}/"
      macOSurlpath=${macOSUpdCombolist%%'macOSUpd'*}
      url="${macOSurlpath}"
      distribution="${macOSUpdkeydistribution[$index]}.English.dist"
      rm -f *dist
      curl $url$distribution -o ${macOSUpdkeydistribution[$index]}.English.dist 2>/dev/null
      macOSupdateProductVersion[$index]=`cat ${macOSUpdkeydistribution[$index]}.English.dist | grep -A 1 macOSProductVersion | awk NR==2 | sed 's/<string>//g' | sed 's/<\/string>//g' | awk '{print $1;}' `
      macOSupdateProductBuildVersion[$index]=`cat ${macOSUpdkeydistribution[$index]}.English.dist | grep -A 1 macOSProductBuildVersion | awk NR==2 | sed 's/<string>//g' | sed 's/<\/string>//g' | awk '{print $1;}' `
      if [[ ${macOSupdateProductVersion[$index]} == "10.14" ]]; then 
        macOSupdateProductVersion[$index]="10.14.0"
      fi
      macOSupdatebuildver[$index]=${macOSupdateProductVersion[$index]}.${macOSupdateProductBuildVersion[$index]}
      macOSupdatebeta[$index]=`cat ${macOSUpdkeydistribution[$index]}.English.dist | grep SU_TITLE | grep strings | grep Beta `
      if [[ ! ${macOSupdatebeta[$index]} == "" ]]; then 
        macOSupdatebeta[$index]="Beta"
      fi
      rm -f *dist

      macOSupdatetypeone=`echo $macOSUpdCombolist | sed 's/<string>//g' | sed 's/<\/string>//g' | sed 's/\// /g' | awk '{print $9;}' | sed 's/macOSUpdCombo//g' | sed 's/.pkg//g' `
      macOSupdatetype[$index]=`echo $macOSupdatetypeone | sed 's/10.14//g' | sed 's/.1//g' | sed 's/.2//g' | sed 's/.3//g' | sed 's/.4//g' | sed 's/.5//g' | sed 's/.6//g' | sed 's/.7//g' `
      macOSuptime[$index]=`cat ${catalogfile} | grep -A 5 PostDate | grep -B 7 $urls${macOSUpdkeydistribution[$index]} | grep \<date\> | sed 's/<date>//g' | sed 's/<\/date>//g' | awk '{print $1;}' | sed 's/T/ /g' | sed 's/Z//g' | awk NR==1 `
      macOSupdate[$index]="${macOSuptime[$index]} .. ${macOSUpdkeydistribution[$index]} .. ${macOSupdatebuildver[$index]} Combo Update ${macOSupdatebeta[$index]}"

      macOSlist[$index]=`echo ${macOSUpdCombolist} `

      let index++
    fi
  done 
  for SecUpdlist in "${SecUpd[@]}"
  do
    if [[ ! $SecUpdlist == "" ]]; then

      macOSUpdver[$index]=`echo $SecUpdlist | sed 's/\// /g' | awk '{print $9;}' | sed 's/macOSUpdCombo//g' | sed 's/Auto.pkg//g' | sed 's/ForSeed.pkg//g' | sed 's/.pkg//g' `

      macOSUpdversion1[$index]=`echo $SecUpdlist | sed 's/\// /g' | awk '{print $5;}' `
      macOSUpdversion2[$index]=`echo $SecUpdlist | sed 's/\// /g' | awk '{print $6;}' `
      macOSUpdversion[$index]="${macOSUpdversion1[$index]}/${macOSUpdversion2[$index]}"
      macOSUpdkey[$index]=`echo $SecUpdlist | sed 's/\// /g' | awk '{print $7;}' `
      macOSUpdkeydistribution[$index]=`echo ${macOSUpdkey[$index]} | sed 's/.\{9\}/& /g' | awk '{print $1;}' `
      macOSUpdsalt[$index]=`echo $SecUpdlist | sed 's/\// /g' | awk '{print $8;}' `

      urls="https://swdist.apple.com/content/downloads/${macOSUpdversion[$index]}/${macOSUpdkey[$index]}/${macOSUpdsalt[$index]}/"
      macOSurlpath=${SecUpdlist%%'SecUpd'*}
      url="${macOSurlpath}"
      distribution="${macOSUpdkeydistribution[$index]}.English.dist"
      rm -f *dist
      curl $url$distribution -o ${macOSUpdkeydistribution[$index]}.English.dist 2>/dev/null
      macOSupdateSecurity[$index]=`cat ${macOSUpdkeydistribution[$index]}.English.dist | grep -A 1 SoftwareUpdate | grep Mojave | sed 's/<line choice="SecUpd//g' | sed 's/Mojave"\/>//g' | sed 's/MojavePublicBeta"\/>//g' | sed 's/MojaveDeveloperBeta"\/>//g' | awk '{print $1;}' `
      macOSupdatebuildver[$index]=`cat ${macOSUpdkeydistribution[$index]}.English.dist | grep '"SU_VERS" = "' | sed 's/"SU_VERS" = "//g' | sed 's/";//g' | awk '{print $1;}' `
      macOSupdatebuildversion[$index]=`cat ${macOSUpdkeydistribution[$index]}.English.dist | grep -A 1 macOSProductBuildVersion | grep string | sed 's/<string>//g' | sed 's/<\/string>//g' | awk '{print $1;}' `
      macOSupdatebuildver[$index]=${macOSupdatebuildver[$index]}.${macOSupdatebuildversion[$index]}.${macOSupdateSecurity[$index]}
      macOSupdatebeta[$index]=`cat ${macOSUpdkeydistribution[$index]}.English.dist | grep SU_TITLE | grep strings | grep Beta `
      if [[ ! ${macOSupdatebeta[$index]} == "" ]]; then 
        macOSupdatebeta[$index]="Beta"
      fi
      rm -f *dist

      macOSupdatetypeone=`echo $SecUpdlist | sed 's/<string>//g' | sed 's/<\/string>//g' | sed 's/\// /g' | awk '{print $9;}' | sed 's/macOSUpdCombo//g' | sed 's/.pkg//g' `
      macOSupdatetype[$index]=`echo $macOSupdatetypeone | sed 's/10.14//g' | sed 's/.1//g' | sed 's/.2//g' | sed 's/.3//g' | sed 's/.4//g' | sed 's/.5//g' | sed 's/.6//g' | sed 's/.7//g' `
      macOSuptime[$index]=`cat ${catalogfile} | grep -A 5 PostDate | grep -B 7 $urls${macOSUpdkeydistribution[$index]} | grep \<date\> | sed 's/<date>//g' | sed 's/<\/date>//g' | awk '{print $1;}' | sed 's/T/ /g' | sed 's/Z//g' | awk NR==1 `
      macOSupdate[$index]="${macOSuptime[$index]} .. ${macOSUpdkeydistribution[$index]} .. ${macOSupdatebuildver[$index]} Security Update ${macOSupdatebeta[$index]}"

      macOSlist[$index]=`echo ${SecUpdlist} `

      let index++
    fi
  done

  index=0
  for list in "${macOSupdate[@]}"
  do
    echo "${macOSlist[$index]}"
    let index++
  done
}
function selectupdateversion()
{
  indexupdatever=0
  Latestupdatever=0
  for updatever in "${macOSupdatebuildver[@]}"
  do
    if [[ $updatever > $Latestupdatever ]]; then
      Latestupdatever=${macOSupdatebuildver[$indexupdatever]}
      Latestupdatebeta=${macOSupdatebeta[$indexupdatever]}
    fi
    let indexupdatever++
  done

  echo
  printf "一般更新 \e[1;34mUpdate\e[0m: update only for previous version, like as from 10.14.1 to 10.14.2.\n"
  printf "組合更新 \e[1;34mCombo Update\e[0m: update for all 10.14 version, like as 10.14.0, 10.14.1, 10.14.x.\n"

  echo
  printf "最新版本 The latest version: \e[1;32m$Latestupdatever $Latestupdatebeta\e[0m\n"

  echo
  echo "可選擇的更新版本 Available version to update:"
  echo

  indexmenu=0
  for updateselect in "${macOSupdate[@]}"
  do
    if [[ ${macOSupdatebuildver[$indexmenu]} == $Latestupdatever ]]; then
      printLatest "[ $indexmenu ] ${updateselect}"
      echo
    else
      echo "[ $indexmenu ] ${updateselect}"
    fi
    checkdownloadver[$indexmenu]=$indexmenu
    let indexmenu++
  done

  echo
  read -p "選擇要更新的版本 Select one version to update: " downloadver
  if [[ ! $downloadver ]]; then
    echo
    echo "發生錯誤！！！                          Error!!!"
    echo
    echo "請選擇正確的更新版本。                  Please select right version to update."
    echo
    rm -f ${catalogfile}
    exit 0
  fi

  checkfine=no
  checkindex=0
  for checkindex in "${checkdownloadver[@]}"
  do
    if [[ $downloadver == $checkindex ]]; then
      checkfine=yes
    fi
    let checkindex++
  done
  if [[ $checkfine == no ]]; then
    echo
    echo "發生錯誤！！！                          Error!!!"
    echo
    echo "請選擇正確的更新版本。                  Please select right version to update."
    echo
    rm -f ${catalogfile}
    exit 0
  fi

  updatever="${macOSUpdver[$downloadver]}"
  version="${macOSUpdversion[$downloadver]}"
  key="${macOSUpdkey[$downloadver]}"
  salt="${macOSUpdsalt[$downloadver]}"
  echo "                                             [ $downloadver ] ${macOSupdate[$downloadver]}."
}
function selecttargetvulome()
{
  echo
  echo "可選擇的目標分區 Available target volumes:"
  echo
  cd /Volumes
  AllVolumes=(*)
  indexA=0
  index=0
  for volume in "${AllVolumes[@]}"
  do
    targetforVolume="/Volumes/$volume"
    if [[ -f "$targetforVolume/System/Library/CoreServices/SystemVersion.plist" ]]; then
      ProductBuildVersion=`cat "$targetforVolume/System/Library/CoreServices/SystemVersion.plist" | grep -A 1 "ProductBuildVersion" | grep string | sed 's/<string>//g' | sed 's/<\/string>//g' | awk '{print $1;}' `
      ProductVersion=`cat "$targetforVolume/System/Library/CoreServices/SystemVersion.plist" | grep -A 1 "ProductVersion" | grep string | sed 's/<string>//g' | sed 's/<\/string>//g' | awk '{print $1;}' `
      SelectVersion=`echo $ProductVersion | sed 's/.\{5\}/& /g' | awk '{print $1;}' `
      if [[ $SelectVersion == 10.14 ]]; then
        if [[ -f "$targetforVolume/System/Library/UserEventPlugins/com.apple.telemetry.plugin/Contents/MacOS/com.apple.telemetry" ]]; then
          AtlistVolume[$indexA]="$targetforVolume"
          OSVersion[$indexA]="$ProductVersion"
          OSBuildVersion[$indexA]="$ProductBuildVersion"          
          printred "[ $indexA ] ${AtlistVolume[$indexA]} ......... $ProductVersion $ProductBuildVersion \n"
          let indexA++
        fi
      fi
    fi
    let index++
  done

  echo
  read -p "選擇要更新的分區 Select a target volume to install update: " VolumeNumber
  if [[ ! ${AtlistVolume[$VolumeNumber]} ]]; then
    echo
    echo "發生錯誤！！！                          Error!!!"
    echo
    echo "請選擇正確的更新分區。                  Please select right target volume to update."
    echo
    exit 0
  fi

  targetVolume="${AtlistVolume[$VolumeNumber]}"

  if [[ -f "$targetVolume/System/Library/CoreServices/SystemVersion.plist" ]]; then
    ProductBuildVersion=`cat "$targetVolume/System/Library/CoreServices/SystemVersion.plist" | grep -A 1 "ProductBuildVersion" | grep string | sed 's/<string>//g' | sed 's/<\/string>//g' | awk '{print $1;}' `
    ProductVersion=`cat "$targetVolume/System/Library/CoreServices/SystemVersion.plist" | grep -A 1 "ProductVersion" | grep string | sed 's/<string>//g' | sed 's/<\/string>//g' | awk '{print $1;}' `

    echo "                                                         [ $VolumeNumber ] ${targetVolume} $ProductVersion $ProductBuildVersion"
    echo
    SelectVersion=`echo $ProductVersion | sed 's/.\{5\}/& /g' | awk '{print $1;}' `
    if [[ ! $SelectVersion == 10.14 ]]; then
      echo
      echo "發生錯誤！！！                          Error!!!"
      echo
      echo "選擇的目標分區，並非 10.14.x 系統分區。 The selected target volume is not 10.14.x partition."
      echo
      exit 0
    fi
  elif [[ ! -f "$targetVolume/System/Library/CoreServices/SystemVersion.plist" ]]; then
    echo "                                                         [ $VolumeNumber ] ${targetVolume} "
    echo
    echo "發生錯誤！！！                          Error!!!"
    echo
    echo "選擇的目標分區，並非 macOS 系統分區。   The selected target volume is not a macOS system partition."
    echo
    exit 0
  fi
}
function downloadupdate()
{
  #
  # Target distribution language.
  # Target files copied from sucatalog.gz (think CatalogURL).
  #

  distribution=`cat ${catalogfile} | grep "${version}" | grep "${key}" | grep "${salt}" | grep English | sed 's/<string>//g' | sed 's/<\/string>//g' | sed 's/\// /g' | awk '{print $9;}' `

  #targetFiles[0]=`cat ${catalogfile} | grep "${version}" | grep "${key}" | grep "${salt}" | grep pkg | grep -v Patch | grep -v RecoveryHDUpdate | grep -v integrityData | sed 's/<string>//g' | sed 's/<\/string>//g' | sed 's/\// /g' | awk '{print $9;}' | awk NR==1 `
  #targetFiles[1]=`cat ${catalogfile} | grep "${version}" | grep "${key}" | grep "${salt}" | grep pkg | grep -v Patch | grep -v RecoveryHDUpdate | grep -v integrityData | sed 's/<string>//g' | sed 's/<\/string>//g' | sed 's/\// /g' | awk '{print $9;}' | awk NR==2 `
  #targetFiles[2]=`cat ${catalogfile} | grep "${version}" | grep "${key}" | grep "${salt}" | grep pkg | grep -v Patch | grep -v RecoveryHDUpdate | grep -v integrityData | sed 's/<string>//g' | sed 's/<\/string>//g' | sed 's/\// /g' | awk '{print $9;}' | awk NR==3 `
  #targetFiles[3]=`cat ${catalogfile} | grep "${version}" | grep "${key}" | grep "${salt}" | grep pkg | grep -v Patch | grep -v RecoveryHDUpdate | grep -v integrityData | sed 's/<string>//g' | sed 's/<\/string>//g' | sed 's/\// /g' | awk '{print $9;}' | awk NR==4 `
  #targetFiles[4]=`cat ${catalogfile} | grep "${version}" | grep "${key}" | grep "${salt}" | grep pkg | grep -v Patch | grep -v RecoveryHDUpdate | grep -v integrityData | sed 's/<string>//g' | sed 's/<\/string>//g' | sed 's/\// /g' | awk '{print $9;}' | awk NR==5 `
  #targetFiles[5]=`cat ${catalogfile} | grep "${version}" | grep "${key}" | grep "${salt}" | grep pkg | grep -v Patch | grep -v RecoveryHDUpdate | grep -v integrityData | sed 's/<string>//g' | sed 's/<\/string>//g' | sed 's/\// /g' | awk '{print $9;}' | awk NR==6 `
  #targetFiles[6]=`cat ${catalogfile} | grep "${version}" | grep "${key}" | grep "${salt}" | grep pkg | grep -v Patch | grep -v RecoveryHDUpdate | grep -v integrityData | sed 's/<string>//g' | sed 's/<\/string>//g' | sed 's/\// /g' | awk '{print $9;}' | awk NR==7 `
  #targetFiles[7]=`cat ${catalogfile} | grep "${version}" | grep "${key}" | grep "${salt}" | grep pkg | grep -v Patch | grep -v RecoveryHDUpdate | grep -v integrityData | sed 's/<string>//g' | sed 's/<\/string>//g' | sed 's/\// /g' | awk '{print $9;}' | awk NR==8 `
  #targetFiles[8]=`cat ${catalogfile} | grep "${version}" | grep "${key}" | grep "${salt}" | grep pkg | grep -v Patch | grep -v RecoveryHDUpdate | grep -v integrityData | sed 's/<string>//g' | sed 's/<\/string>//g' | sed 's/\// /g' | awk '{print $9;}' | awk NR==9 `
  #targetFiles[9]=`cat ${catalogfile} | grep "${version}" | grep "${key}" | grep "${salt}" | grep pkg | grep -v Patch | grep -v RecoveryHDUpdate | grep -v integrityData | sed 's/<string>//g' | sed 's/<\/string>//g' | sed 's/\// /g' | awk '{print $9;}' | awk NR==10 `
  #targetFiles[10]=`cat ${catalogfile} | grep "${version}" | grep "${key}" | grep "${salt}" | grep pkg | grep -v Patch | grep -v RecoveryHDUpdate | grep -v integrityData | sed 's/<string>//g' | sed 's/<\/string>//g' | sed 's/\// /g' | awk '{print $9;}' | awk NR==11 `
  #targetFiles[11]=`cat ${catalogfile} | grep "${version}" | grep "${key}" | grep "${salt}" | grep pkg | grep -v Patch | grep -v RecoveryHDUpdate | grep -v integrityData | sed 's/<string>//g' | sed 's/<\/string>//g' | sed 's/\// /g' | awk '{print $9;}' | awk NR==12 `
  #targetFiles[12]=`cat ${catalogfile} | grep "${version}" | grep "${key}" | grep "${salt}" | grep pkg | grep -v Patch | grep -v RecoveryHDUpdate | grep -v integrityData | sed 's/<string>//g' | sed 's/<\/string>//g' | sed 's/\// /g' | awk '{print $9;}' | awk NR==13 `
  #targetFiles[13]=`cat ${catalogfile} | grep "${version}" | grep "${key}" | grep "${salt}" | grep pkg | grep -v Patch | grep -v RecoveryHDUpdate | grep -v integrityData | sed 's/<string>//g' | sed 's/<\/string>//g' | sed 's/\// /g' | awk '{print $9;}' | awk NR==14 `
  #targetFiles[14]=`cat ${catalogfile} | grep "${version}" | grep "${key}" | grep "${salt}" | grep pkg | grep -v Patch | grep -v RecoveryHDUpdate | grep -v integrityData | sed 's/<string>//g' | sed 's/<\/string>//g' | sed 's/\// /g' | awk '{print $9;}' | awk NR==15 `
  #targetFiles[15]=`cat ${catalogfile} | grep "${version}" | grep "${key}" | grep "${salt}" | grep pkg | grep -v Patch | grep -v RecoveryHDUpdate | grep -v integrityData | sed 's/<string>//g' | sed 's/<\/string>//g' | sed 's/\// /g' | awk '{print $9;}' | awk NR==16 `
  AtargetFilesArray=`cat ${catalogfile} | grep "${version}" | grep "${key}" | grep "${salt}" | grep pkg | grep -v Patch | grep -v RecoveryHDUpdate | grep -v integrityData | sed 's/<string>//g' | sed 's/<\/string>//g' | sed 's/\// /g' | awk '{print $9;}' `

  let index=0
  for element in "${AtargetFilesArray[@]}"; do
    AtargetFiles[$index]="${element}"
    let index++
  done

  targetFiles=($(echo "${AtargetFiles[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' '))

  RecoverHDPackage=`cat ${catalogfile} | grep "${version}" | grep "${key}" | grep "${salt}" | grep RecoveryHDUpdate.pkg | grep -v integrityData | sed 's/<string>//g' | sed 's/<\/string>//g' | sed 's/\// /g' | awk '{print $9;}' | awk NR==1 `
  PatchPackage=`cat ${catalogfile} | grep "${version}" | grep "${key}" | grep "${salt}" | grep pkg | grep Patch | grep -v integrityData | sed 's/<string>//g' | sed 's/<\/string>//g' | sed 's/\// /g' | awk '{print $9;}' | awk NR==1 `

  rm -f ${catalogfile}
  cd

  #
  # You may need VolumeCheck() to return true (and thus skip checks)
  #
  export __OS_INSTALL=1

  #
  # Skip firmware update (OSInstaller).
  #
  export __FIRMWARE_UPDATE_OPTOUT

  #
  # Do not convert target HFS volume to APFS (OSInstaller).
  #
  export __APFS_OPTOUT=1

  #
  # Initialisation of a variable.
  #
  let index=0
  
  if [[ $key == "*" || $version == "*" || $salt == "*" ]]; then
    echo 'Error: variables unitialised, please run makeInstallSeedScript.py'
    exit -1
  fi

  #
  # Change additional shell optional behavior (expand unmatched names to a null string).
  #
  shopt -s nullglob

  #
  # type of target volume. GUID_partition_scheme or FDisk_partition_scheme
  #
  disknumber=`diskutil info "$targetVolume" | grep "Part of Whole:" | awk '{print $4;}'`
  partitiontype=`diskutil info /dev/$disknumber | grep Content | awk '{print $3;}'`

  #
  # Initialisation of a variable (our target folder).
  #
  tmpDirectory="/private/tmp"

  #
  # Name of target installer package.
  #
  installerPackage="installer.pkg"

  #
  # URL copied from sucatalog.gz (think CatalogURL).
  #
  url="https://swdist.apple.com/content/downloads/${version}/${key}/${salt}/"

  #
  # Check target directory.
  #
  if [[ -d "${tmpDirectory}/${key}" ]]; then
    rm -rf "${tmpDirectory}/${key}"
    mkdir "${tmpDirectory}/${key}"
  fi
  if [[ ! -d "${tmpDirectory}/${key}" ]]; then
    mkdir "${tmpDirectory}/${key}"
  fi
  open "${tmpDirectory}/${key}"

  echo "準備進行下載。Prepare to download the update files. [ $downloadver ] ${macOSupdate[$downloadver]}."
  echo 
  echo "${url}${distribution}"
  for filename in "${targetFiles[@]}"
  do
    if [[ ! $filename == "" ]]; then
      echo "${url}$filename"
    fi
  done
  if [[ ! $partitiontype == "FDisk_partition_scheme" ]]; then
    echo "${url}${RecoverHDPackage}"
  fi
  echo

  printred "如果你已經發生下載錯誤，可以 預先手動下載 上列網址文件，並將文件放入 以下 正確的文件夾 即可繼續進行。\n"
  printred "If get errors of downloading before, you can download files as above URL manually and put into correct folder as below before continuing.\n"
  echo

  echo "${tmpDirectory}/${key}/${distribution}"
  for filename in "${targetFiles[@]}"
  do
    if [[ ! $filename == "" ]]; then
      echo "${tmpDirectory}/${key}/$filename"
    fi
  done
  if [[ ! $partitiontype == "FDisk_partition_scheme" ]]; then
    echo "${tmpDirectory}/${key}/${RecoverHDPackage}"
  fi
  echo

  read -p "手動下載放入上列文件，或由腳本自動下載文件，繼續進行？   Put files as above manually or download files automatically, continue? (y/n) " downloadyesno
  case "$downloadyesno" in
    y|Y)
      echo
    ;;
    *)
      echo
      echo "停止進行下載！！！               Stop downloading!!!"
      echo
      exit 0
    ;;
  esac

  #
  # Download distribution file.
  #
  if [[ ! -e "${tmpDirectory}/${key}/${distribution}" ]]; then
    echo "Downloading: ${distribution} ..."
    curl "${url}${distribution}" -o "${tmpDirectory}/${key}/${distribution}"
    #
    # Remove root only restriction/allow us to install on any target volume.
    #
    cat "${tmpDirectory}/${key}/${distribution}" | sed -e 's|rootVolumeOnly="true"|allow-external-scripts="true"|' > "${tmpDirectory}/${key}/new.dist"

    if [[ -e "${tmpDirectory}/${key}/new.dist" ]]; then
      mv "${tmpDirectory}/${key}/new.dist" "${tmpDirectory}/${key}/${distribution}"
    fi
  else
    echo "File: ${distribution} already there, skipping this download."
  fi

  #
  # Change to working directory (otherwise it will fail to locate the packages).
  #
  cd "${tmpDirectory}/${key}"

  #
  # Download target files.
  #
  for filename in "${targetFiles[@]}"
  do
    if [[ ! $filename == "" ]]; then
      if [[ ! -e "${tmpDirectory}/${key}/${filename}" ]]; then
        echo "Downloading: ${filename} ..."
        curl "${url}${filename}" -o "${tmpDirectory}/${key}/${filename}"
      else
        echo "File: ${filename} already there, skipping this download."
      fi
    fi
  done
}
function installRecoveryHDUpdate()
{
  #
  # Download Recovery HD partition update and install it.
  #
  if [[ ! $partitiontype == "FDisk_partition_scheme" ]]; then
    if [[ ! -e "${tmpDirectory}/${key}/${RecoverHDPackage}" ]]; then
      echo "Downloading: ${RecoverHDPackage} ..."
      curl "${url}${RecoverHDPackage}" -o "${tmpDirectory}/${key}/${RecoverHDPackage}"
    else
      echo "File: ${RecoverHDPackage} already there, skipping this download."
    fi
    echo
    printf "Installing ${RecoverHDPackage} to \e[1;34mRecovery HD partition\e[0m.\n"

    ###### crazybirdy add ######
    /bin/rm -rf /private/tmp/RecoveryHDUpdate
    pkgutil --expand-full "${tmpDirectory}/${key}/${RecoverHDPackage}" /private/tmp/RecoveryHDUpdate
    PACKAGE_PATH="/private/tmp/RecoveryHDUpdate/RecoveryHDMeta.dmg"
    TARGET="${targetVolume}"
    dmbin="$scriptdirpath/dm"
    ###### crazybirdy add ######

    echo
    echo "Attempting to create temporary mount point"
    MOUNT_POINT="$(/usr/bin/mktemp -d)"

    echo
    echo "Attempting mount of ${PACKAGE_PATH} to ${MOUNT_POINT}"
    echo
    /usr/bin/hdiutil attach -nobrowse "${PACKAGE_PATH}" -mountpoint "${MOUNT_POINT}"
    echo

    echo "Probing Target Volume: ${TARGET}"
    FS_TYPE=$(diskutil info "${TARGET}" | awk '$1 == "Type" { print $NF }')
    echo "Target Volume FS: ${FS_TYPE}"
    echo
    if [[ "${FS_TYPE}" == "apfs" ]]; then
      echo "Running ensureRecoveryBooter for APFS target volume: ${TARGET}"
      "${dmbin}" ensureRecoveryBooter "${TARGET}" -base "${MOUNT_POINT}/BaseSystem.dmg" "${MOUNT_POINT}/BaseSystem.chunklist" -diag "${MOUNT_POINT}/AppleDiagnostics.dmg" "${MOUNT_POINT}/AppleDiagnostics.chunklist" -diagmachineblacklist 0 -installbootfromtarget 0 -slurpappleboot 0 -delappleboot 0 -addkernelcoredump 0
    else
      echo "Running ensureRecoveryPartition for Non-APFS target volume: ${TARGET}"
      "${dmbin}" ensureRecoveryPartition "${TARGET}" "${MOUNT_POINT}/BaseSystem.dmg" "${MOUNT_POINT}/BaseSystem.chunklist" "${MOUNT_POINT}/AppleDiagnostics.dmg" "${MOUNT_POINT}/AppleDiagnostics.chunklist" 0 0 0
    fi

    echo
    echo "Eject ${MOUNT_POINT}"
    /usr/bin/hdiutil eject "${MOUNT_POINT}"
    echo "Delete ${MOUNT_POINT}"
    /bin/rm -rf "${MOUNT_POINT}"

    ###### crazybirdy add ######
    /bin/rm -rf /private/tmp/RecoveryHDUpdate
    ###### crazybirdy add ######
  fi
}
function installupdate()
{
  #
  # Create installer package.
  #
  if [[ -f "${tmpDirectory}/${key}/${RecoverHDPackage}" ]]; then
    mv "${tmpDirectory}/${key}/${RecoverHDPackage}" "${tmpDirectory}/${key}-${RecoverHDPackage}"
  fi
  if [[ -f "${tmpDirectory}/${key}/${PatchPackage}" ]]; then
    mv "${tmpDirectory}/${key}/${PatchPackage}" "${tmpDirectory}/${key}-${PatchPackage}"
  fi
  cd "${tmpDirectory}/${key}"
  cp ${distribution} ${distribution}-org
  sed -e '/volume-check/d' ${distribution} > new1.txt
  sed -e '/installation-check/d' new1.txt > new2.txt
  sed -e '/RecoveryHDUpdate/d' new2.txt > new3.txt
  sed -e '/system-image/d' new3.txt > new4.txt
  sed -e '/Patch/d' new4.txt > new5.txt
  cp new5.txt ${distribution}
  rm ${distribution}-org
  rm new?.txt

  if [[ "${RecoverHDPackage}" == "" ]]; then
    if [[ "${PatchPackage}" == "" ]]; then
      echo
      echo "Creating installer.pkg ..."
    elif [[ ! "${PatchPackage}" == "" ]]; then
      echo
      echo "Creating installer.pkg without ${PatchPackage}..."
    fi
  elif [[ ! "${RecoverHDPackage}" == "" ]]; then
    if [[ "${PatchPackage}" == "" ]]; then
      echo
      echo "Creating installer.pkg without ${RecoverHDPackage}..."
    elif [[ ! "${PatchPackage}" == "" ]]; then
      echo
      echo "Creating installer.pkg without ${RecoverHDPackage} and ${PatchPackage}..."
    fi
  fi

  productbuild --distribution "${tmpDirectory}/${key}/${distribution}" --package-path "${tmpDirectory}/${key}" "${installerPackage}"

  #
  # Launch the installer.
  #
  if [[ -e "${tmpDirectory}/${key}/${installerPackage}" ]]; then
    echo
    if [[ ! "${PatchPackage}" == "" ]]; then
      printf "Installing update to \e[1;34mSystem partition\e[0m without ${PatchPackage}.\n"
    else
      printf "Installing update to \e[1;34mSystem partition\e[0m.\n"
    fi
    sudo /usr/sbin/installer -pkg "${tmpDirectory}/${key}/${installerPackage}" -target "${targetVolume}"
    if [[ -f "${tmpDirectory}/${key}-${RecoverHDPackage}" ]]; then
      mv "${tmpDirectory}/${key}-${RecoverHDPackage}" "${tmpDirectory}/${key}/${RecoverHDPackage}"
    fi
    if [[ -f "${tmpDirectory}/${key}-${PatchPackage}" ]]; then
      mv "${tmpDirectory}/${key}-${PatchPackage}" "${tmpDirectory}/${key}/${PatchPackage}"
    fi
  fi
  echo
}
function createupdatedmg()
{
  #
  # create dmg for installer.
  #
  # 10.14.3.18D109 as ${macOSupdatebuildver[$downloadver]}
  FinalDirectory="$HOME/Desktop"
  FinalVolname="update-${macOSupdatebuildver[$downloadver]}"
  Finaldmgname="update-${macOSupdatebuildver[$downloadver]}"
  TempDirectory="${tmpDirectory}"
  TempVolname="update-${macOSupdatebuildver[$downloadver]}"

  if [[ -d "/Volumes/${FinalVolname}/" ]]; then
    diskutil eject "/Volumes/${FinalVolname}/"
    echo
  fi
  if [[ -f "${TempDirectory}/${TempVolname}.sparseimage" ]]; then
    rm -f "${TempDirectory}/${TempVolname}.sparseimage"
  fi
  if [[ -f "${FinalDirectory}/${Finaldmgname}.dmg" ]]; then
    rm -f "${FinalDirectory}/${Finaldmgname}.dmg"
  fi

  hdiutil create -type SPARSE -fs HFS+J -size 7000m -volname "${FinalVolname}" -attach "${TempDirectory}/${TempVolname}"
  echo

  open "${TempDirectory}/${TempVolname}.sparseimage"

  open "/Volumes/${FinalVolname}/"

  cp -fv "${tmpDirectory}/${key}/${installerPackage}" "/Volumes/${FinalVolname}/"

  echo
  diskutil eject "/Volumes/${FinalVolname}/"
  echo
  hdiutil convert "${TempDirectory}/${TempVolname}.sparseimage" -format UDCo -o "${FinalDirectory}/${Finaldmgname}"
  echo
  echo "製作完成。 Update installer dmg is done as ${FinalDirectory}/${Finaldmgname}.dmg"
  open "${FinalDirectory}"

  rm -f "${TempDirectory}/${TempVolname}.sparseimage"
}
function endline()
{
  #
  # http://www.insanelymac.com/forum/topic/330364-macos-high-sierra-10132-update-released/?p=2546218
  # Fix Safari and App Store stopped connecting to the internet.
  # 
  echo
  printf "完成更新及重新啓動電腦之後，\e[1;34mSafari 及 App Store 將發生無法聯網的錯誤。\e[0m\n"
  printf "須在終端，鍵入以下命令修復，並在完成後重新啓動電腦：\n"
  printf "After updating finished and reboot, \e[1;34mSafari and App Store will stop connecting to the internet.\e[0m\n"
  printf "To fix this, need to run the following code in Terminal, and reboot after finished:\n"
  printf "\e[1;31mreboot\e[0m\n"
  printf "\e[1;31msudo update_dyld_shared_cache -force\e[0m\n"
  printf "\e[1;31mreboot\e[0m\n"
  echo
  printf "如果更新後，開機發生錯誤 log，可能是 kernel cache 的問題，請用 -s 開機進入單用戶模式，執行以下命令\n"
  printf "If you get error log after updating, you should boot with -s to single user mode, and try the following commands.\n"
  printf "\e[1;31mmount -uw /\e[0m\n"
  printf "\e[1;31mk﻿extcache -i /\e[0m\n"
  printf "\e[1;31mreboot\e[0m\n"
  echo
  echo
}
function main()
{
  updatescript
  headline
  checkdm
  catalogselect
  macosupdatearray
  macosupdatecomboarray
  macosupdatesecurityarray
  updatelist
  selectupdateversion
  selecttargetvulome
  downloadupdate
  installRecoveryHDUpdate
  installupdate
  createupdatedmg
  endline
}

main

exit 0
